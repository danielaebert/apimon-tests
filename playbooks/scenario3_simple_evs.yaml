---

- name: Scenario 3 - basic storage functionality
  hosts: localhost
  vars:
    prefix: scenario3-
  tasks:
    - name: Check volume endpoint
      script: check_volume_ep.py
      tags: 'service=block_storage'

    - set_fact:
        prefix: "{{ (prefix + ( lookup('env', 'TASK_EXECUTOR_JOB_ID') | default(99999999 | random | to_uuid | hash('md5'), true) ) ) }}"

    - set_fact:
        volume_name: "{{ (prefix + '-test_volume_apimon') }}"
        snapshot_name: "{{ (prefix + '-test_snapshot_apimon') }}"
        backup_name: "{{ (prefix + '-test_backup_apimon') }}"

        #     - name: pre-cleanup
        #       script: cleanup_scenario3.py 'scenario3-'

    - name: List Volumes
      script: list_volumes.py
      tags: 'service=block_storage'

    - name: Rescue block
      block:

        - name: Create Volume
          os_volume:
            state: present
            availability_zone: eu-de-01
            size: 10
            display_name: "{{volume_name}}"

        - name: List Snapshots
          script: list_snapshots.py
          tags: 'service=block_storage'

        - name: Create snapshot
          os_volume_snapshot:
            state: present
            display_name: "{{snapshot_name}}"
            volume: "{{volume_name}}"
          tags: ["metric=create_volume_snapshot"]

        - name: List Backups
          script: list_backups.py
          tags: 'service=block_storage'

        - name: Create backup
          script: "create_backup.py {{volume_name}} {{snapshot_name}} {{backup_name}}"
          tags:
            - "service=block_storage"
            - "metric=create_volume_backup"

        - name: Restore backup
          script: "restore_backup.py {{backup_name}} {{volume_name}} {{ (volume_name + 'new') }}"
          tags:
            - "service=block_storage"
            - "metric=restore_volume_backup"

        - name: Modify snapshot
          script: "modify_snapshot.py {{snapshot_name}} {{ (snapshot_name + '_new') }}"
          tags: 'service=block_storage'

      rescue:
        - name: Get info about backup
          script: "get_backup_info.py {{ backup_name }}"
          register: backup_info
          tags: 'service=block_storage'

        - name: Print backup info
          debug:
            var: backup_info.stdout

        - name: Get info about volume
          script: "get_volume_info.py {{ volume_name }}"
          tags: 'service=block_storage'
          register: volume_info

        - name: Print volume info
          debug:
            var: volume_info.stdout

      always:
        # If we failed - cleanup what we can
        - block:
            - name: Delete backup
              script: "delete_backup.py {{backup_name}}"
              tags:
                - "service=block_storage"
                - "metric=delete_volume_backup"

            - name: Delete original snapshot
              os_volume_snapshot:
                state: absent
                display_name: "{{ snapshot_name }}"
                volume: "{{volume_name}}"
              tags:
                - "metric=delete_volume_snapshot"

            - name: Delete new snapshot
              os_volume_snapshot:
                state: absent
                display_name: "{{ (snapshot_name + '_new') }}"
                volume: "{{volume_name}}"

              # NOTE(gtema): metrics with same name will me merged together,
              # therefore pick the deletion of only single snapshot

            - name: Delete Volume
              os_volume:
                state: absent
                display_name: "{{volume_name}}"
              tags:
                - "metric=delete_volume"
          ignore_errors: True
